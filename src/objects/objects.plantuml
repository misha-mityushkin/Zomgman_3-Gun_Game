@startuml

title __OBJECTS's Class Diagram__\n

  namespace objects {
    class objects.Bullet {
        - bulletType : byte
        - damage : byte
        - distanceTraveled : float
        - player1or2 : boolean
        - range : int
        + Bullet()
        + getDamage()
        + getDistanceTraveled()
        + getRange()
        + isPlayer1or2()
        + move()
        {static} - getInitialBulletData()
        {static} - getOtherImage()
    }
  }
  

  namespace objects {
    class objects.DirectionalMapObject {
        - dir : boolean
        - otherImage : Image
        + DirectionalMapObject()
        + changeDirection()
        + getDir()
        + getOtherImage()
        + setDir()
        + setOtherImage()
    }
  }
  

  namespace objects {
    class objects.Gun {
        - ammoRemaining : byte
        - bullets : ArrayList<Bullet>
        - delayBetweenShots : int
        - fireMode : byte
        - firing : boolean
        - numSuccessiveRoundsFired : byte
        - player1or2 : boolean
        - reloadTime : int
        - reloading : boolean
        - timeAtLastPress : long
        - timeAtLastShot : long
        - timeAtReloadStart : long
        - type : byte
        - won : boolean
        + Gun()
        + checkReload()
        + downgrade()
        + fire()
        + getBullets()
        + getFireMode()
        + getRemainingAmmo()
        + getType()
        + isPlayer1or2()
        + isReloading()
        + reload()
        + setImages()
        + stopFiring()
        + update()
        + updateCoordinates()
        + upgrade()
        {static} - getInitialGunData()
        {static} - getOtherImage()
        - moveBullets()
        - reset()
        - setGunProperties()
    }
  }
  

  namespace objects {
    class objects.Hand {
        - player1or2 : boolean
        + Hand()
        + updateCoordinates()
        {static} - getHandImage()
        {static} - getInitialHandData()
    }
  }
  

  namespace objects {
    class objects.MapObject {
        + MapObject()
        + getObjectData()
        + setObjectData()
        + toString()
    }
  }
  

  namespace objects {
    class objects.MovingDirectionalMapObject {
        - xVel : float
        - yVel : float
        + MovingDirectionalMapObject()
        + changeDirection()
        + getxVel()
        + getyVel()
        + isOutOfBounds()
        + move()
        + setxVel()
        + setyVel()
    }
  }
  

  namespace objects {
    class objects.Player {
        - falling : boolean
        - health : byte
        - holdingShoot : boolean
        - jumping : boolean
        - player1or2 : boolean
        - points : byte
        - strafing : boolean
        - timesJumped : byte
        + Player()
        + changeDirection()
        + downgradeGun()
        + getGun()
        + getHand()
        + getHealth()
        + isAlive()
        + isHoldingShoot()
        + isPlayer1or2()
        + jump()
        + move()
        + respawn()
        + setHoldingShoot()
        + setJumping()
        + setStrafing()
        + takeDamage()
        + update()
        + upgradeGun()
        {static} - getInitialPlayerData()
        {static} - getOtherImage()
        - getOtherPlayer()
    }
  }
  

  objects.Bullet -up-|> objects.MovingDirectionalMapObject
  objects.DirectionalMapObject -up-|> objects.MapObject
  objects.Gun -up-|> objects.DirectionalMapObject
  objects.Hand -up-|> objects.MapObject
  objects.MapObject o-- main.ObjectData : objectData
  objects.MovingDirectionalMapObject -up-|> objects.DirectionalMapObject
  objects.Player -up-|> objects.MovingDirectionalMapObject
  objects.Player o-- objects.Gun : gun
  objects.Player o-- objects.Hand : leftHand
  objects.Player o-- objects.Hand : rightHand


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
